----Exercice1:
1-
def suite(a, N): x0 = a + 1
 x = [x0]
 for n in range(N):
 xn = 1/2 * (x[n] + (a / x[n])) x.append(xn) 
return x

2/ 
a/ 

a = 20
N = 5  
x_terms = suite(a, N+1)
print("Les 6 premiers termes de la suite (xn) sont :", x_terms)

Les 6 premiers termes de la suite (xn) sont : 

[21.0, 11.547619047619047, 7.065268065268065, 5.257395887124136, 4.898988743869464, 4.884057970718042]

b/

import numpy as np
import matplotlib.pyplot as plt

a = 20
N = 5 

x_terms = suite(a, N+1) 

n = np.arange(N+2)  

delta = np.sqrt(a) 

plt.plot(n, x_terms, marker='o', label='Termes de la suite') 
plt.plot(n, np.full_like(n, delta), label='Droite') 
plt.xlabel('n')
plt.ylabel('Valeurs')
plt.title('Représentation graphique des termes de la suite')
plt.axis([0,8, 0, 25])
plt.grid(True)
plt.legend()

plt.show()

c)
#	la limite est la racine carree de a

d)
a = 50
N = 4

x_values = suite(a, N)
approx_sqrt_50 = x_values[-1]

print("Valeur approchée de √50 :", approx_sqrt_50)
#Valeur approchée de √50 : 7.07106

---Exercice 2
PARTIE 1
1-a
def verification(z):
    unique_elements = np.unique(z)
    return len(unique_elements) == len(z)


-b
x = np.array([[91], [271], [451], [530], [631], [721], [800]])
y = np.array([[41], [89], [97], [89], [67], [73], [2]])

-c
print(verification(x))
true
justification : on les xi ̸= xj , pour tout 0 ≤ i, j ≤ tels que i ̸= j donc Il existe un unique polynôme d’interpolation

-d
def matrice(p):
    AP = np.zeros((7, p+1)) 

    for i in range(7):
        for j in range(p+1):
            AP[i][j] = i*j  
    
    return AP

2-a
def inversible(B):
    T = np.shape(B)
    test = 0

    if T[0] == T[1]:  # Vérifier si B est carrée
        if np.linalg.det(B) != 0:  # Tester le déterminant
            test = 1

    return test
PARTIE II:
1)a)
def coefficients(x, y, p):
    n = len(x)
    A1 = np.ones((n, 1))
    A2 = np.zeros((n, p))
    
    for i in range(p):
        A2[:, i] = x**(i+1)
    
    A = np.concatenate((A1, A2), axis=1)
    tA = np.transpose(A)
    tAy = np.dot(tA, y)
    tAA = np.dot(tA, A)
    
    # Calcul des coefficients du polynôme
    coefficients = np.dot(np.linalg.inv(tAA), tAy)
    
    return coefficients, A







